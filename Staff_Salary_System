#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

long int IDNumber[50];
char FirstName[50][50], LastName[50][50], MaritalStatus, SpouseWorkingStatus, DisabilityStatus, AddMorePersonnel, TempFirstName[50], TempLastName[50];
float MonthlyGrossSalary[50], MonthlyTotalGrossSalary[50], DailyTotalGrossSalary[50], PostTaxGross[50], TotalGeneral, TotalTaxDeduction, InitialMoneyTotal, HighestGross, HighestMonthlySalary;
int SpouseAllowance, ChildAllowance, ChildCount, OlderChildren, HighDisability, DisabilityAllowance=0, DisabilityDegree=0;
int EmployeeCount=-1, BelowTwoThousand=0;
int c200[100], c100[100], c50[100], c20[100], c10[100], c5[100], c1[100];
int b200[100], b100[100], b50[100], b20[100], b10[100], b5[100];
int ConversionWhole[50], CentsConversion[50];
int Total200, Total100, Total50, Total20, Total10, Total5, Total1, Totalk50, Totalk25, Totalk10, Totalk5, Totalk1;
int Tax27=0, Tax35=0, Tax20=0, Tax15=0;
float Tax27Percent, Tax35Percent, Tax20Percent, Tax15Percent;
int i,k,j, MarriedCount=0, SingleCount=0, WorkingSpouse=0, HasChild=0, TotalChildCount=0, MoreThanThreeChildren=0, DisabledEmployeesCount=0;

int main()
{
    setlocale(LC_ALL,"Turkish");
    PersonnelInfo();
}

void PersonnelInfo()
{
    EmployeeCount++;
    printf("Your ID Number:");
    scanf("%ld",&IDNumber[EmployeeCount]);
    printf("Your First Name and Last Name:");
    scanf("%s %s", &TempFirstName, &TempLastName);
    for(i=0;i<strlen(TempFirstName);i++)
    {
        FirstName[EmployeeCount][i]=TempFirstName[i];
        LastName[EmployeeCount][i]=TempLastName[i];
    }
    printf("Enter Your Monthly Gross Salary:");
    scanf("%f",&MonthlyGrossSalary[EmployeeCount]);
    SpouseStatus();
}

void SpouseStatus()
{
    printf("Marital Status: (m/M/s/S) ");
    scanf("%s", &MaritalStatus);
    if (MaritalStatus == 'm' || MaritalStatus == 'M')
    {
        printf("Is Your Spouse Working: (y/Y/n/N) ");
        scanf("%s", &SpouseWorkingStatus);
        if (SpouseWorkingStatus == 'y' || SpouseWorkingStatus == 'Y')
        {
            MarriedCount++;
            WorkingSpouse++;
            ChildInfo();
        }
        else if (SpouseWorkingStatus == 'n' || SpouseWorkingStatus == 'N')
        {
            MarriedCount++;
            SpouseAllowance = 220;
            ChildInfo();
        }
        else
        {
            printf("Please Enter the Requested Values\a\a");
            SpouseStatus();
        }
    }
    else if (MaritalStatus == 's' || MaritalStatus == 'S')
    {
        SingleCount++;
        TaxCalculation();
    }
    else
    {
        printf("Please Enter the Requested Values\a\a");
        SpouseStatus();
    }
}

void ChildInfo()
{
    printf("Number of dependents children: ");
    scanf("%d", &ChildCount);
    if (ChildCount > 0)
    {
        printf("Number of Children Older Than 6: ");
        scanf("%d", &OlderChildren);
        if (ChildCount >= OlderChildren)
        {
            HasChild++;
            TotalChildCount += ChildCount;
            ChildAllowance = (OlderChildren * 45) + (ChildCount - OlderChildren) * 25;
            if (ChildCount > 3)
            {
                MoreThanThreeChildren++;
            }
            TaxCalculation();
        }
        else
        {
            printf("You do not have that many children\a\a");
            ChildInfo();
        }
    }
    else if (ChildCount == 0)
    {
        TaxCalculation();
    }
    else
    {
        printf("Number of Children Cannot Be Negative\a\a");
        ChildInfo();
    }
}

void TaxCalculation()
{
    MonthlyTotalGrossSalary[EmployeeCount] = MonthlyGrossSalary[EmployeeCount] + SpouseAllowance + ChildAllowance;
    DailyTotalGrossSalary[EmployeeCount] = MonthlyTotalGrossSalary[EmployeeCount];
    if (MonthlyTotalGrossSalary[EmployeeCount] < 2000)
    {
        MonthlyTotalGrossSalary[EmployeeCount] -= MonthlyTotalGrossSalary[EmployeeCount] * 15 / 100;
        Tax15++;
        DisabilityInfo();
    }
    else if (MonthlyTotalGrossSalary[EmployeeCount] >= 2000 && MonthlyTotalGrossSalary[EmployeeCount] < 5000)
    {
        MonthlyTotalGrossSalary[EmployeeCount] -= MonthlyTotalGrossSalary[EmployeeCount] * 20 / 100;
        Tax20++;
        DisabilityInfo();
    }
    else if (MonthlyTotalGrossSalary[EmployeeCount] >= 5000 && MonthlyTotalGrossSalary[EmployeeCount] < 10000)
    {
        MonthlyTotalGrossSalary[EmployeeCount] -= MonthlyTotalGrossSalary[EmployeeCount] * 27 / 100;
        Tax27++;
        DisabilityInfo();
    }
    else if (MonthlyTotalGrossSalary[EmployeeCount] >= 10000)
    {
        MonthlyTotalGrossSalary[EmployeeCount] -= MonthlyTotalGrossSalary[EmployeeCount] * 35 / 100;
        Tax35++;
        DisabilityInfo();
    }
}

void DisabilityInfo()
{
    PostTaxGross[EmployeeCount] = MonthlyTotalGrossSalary[EmployeeCount];
    printf("Do You Have Any Disability: (y/Y/n/N) ");
    scanf("%s", &DisabilityStatus);
    if (DisabilityStatus == 'y' || DisabilityStatus == 'Y')
    {
        DisabledEmployeesCount++;
        printf("Enter Your Disability Percentage: ");
        scanf("%d", &HighDisability);
        if (HighDisability >= 80)
        {
            PostTaxGross[EmployeeCount] += 900;
            DisabilityDegree = 1;
            Conversion();
        }
        else if (HighDisability >= 60 && HighDisability < 80)
        {
            PostTaxGross[EmployeeCount] += 470;
            DisabilityDegree = 2;
            Conversion();
        }
        else if (HighDisability >= 40 && HighDisability < 60)
        {
            PostTaxGross[EmployeeCount] += 210;
            DisabilityDegree = 3;
            Conversion();
        }
        else if (HighDisability == 0 && HighDisability < 40)
        {
            Conversion();
        }

    }
    else if (DisabilityStatus == 'n' || DisabilityStatus == 'N')
        {
            Conversion();
        }

}

void Conversion()
{
    ConversionWhole[EmployeeCount] = (int)PostTaxGross[EmployeeCount];
    b200[EmployeeCount] = (ConversionWhole[EmployeeCount] / 200);
    b100[EmployeeCount] = (ConversionWhole[EmployeeCount] % 200) / 100;
    b50[EmployeeCount] = (ConversionWhole[EmployeeCount] % 100) / 50;
    b20[EmployeeCount] = (ConversionWhole[EmployeeCount] % 50) / 20;
    b10[EmployeeCount] = (ConversionWhole[EmployeeCount] % 15) / 10;
    b5[EmployeeCount] = (ConversionWhole[EmployeeCount] % 10) / 5;
    c1[EmployeeCount] = (ConversionWhole[EmployeeCount] % 5) / 1;

    CentsConversion[EmployeeCount] = (PostTaxGross[EmployeeCount] - ConversionWhole[EmployeeCount]) * 100; /*To find the fraction part */
    c50[EmployeeCount] = (CentsConversion[EmployeeCount] / 50);
    c25[EmployeeCount] = (CentsConversion[EmployeeCount] % 50) / 25;
    c10[EmployeeCount] = (CentsConversion[EmployeeCount] % 25) / 10;
    c5[EmployeeCount] = (CentsConversion[EmployeeCount] % 10) / 5;
    c1[EmployeeCount] = (CentsConversion[EmployeeCount] % 5) / 1;



    printf("\n\nID Number and Name: %ld  %s %s", IDNumber[EmployeeCount], FirstName[EmployeeCount], LastName[EmployeeCount]);
    printf("\nMonthly Gross Salary: %.2f", MonthlyGrossSalary[EmployeeCount]);
    printf("\nSpouse Allowance: %d", SpouseAllowance);
    printf("\nChild Allowance: %d", ChildAllowance);
    printf("\nTotal Monthly Gross Salary: %.2f", MonthlyGrossSalary[EmployeeCount] + SpouseAllowance + ChildAllowance);
    printf("\nIncome Tax Deduction: %.2f", DailyTotalGrossSalary[EmployeeCount] - MonthlyTotalGrossSalary[EmployeeCount]);
    printf("\nDisability Degree: %d", DisabilityDegree);
    printf("\nMonthly Net Salary: %.2f", PostTaxGross[EmployeeCount]);
    printf("\n\n\n200\t 100\t 50\t 20\t 10\t 5\t 1\t0.5\t0.25\t0.1\t0.05\t0.01");
    printf("\n---\t ---\t ---\t---\t---\t---\t---\t---\t---\t---\t---\t---\t ");
    printf("\n%d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d ",b200[EmployeeCount],b100[EmployeeCount],b50[EmployeeCount],b20[EmployeeCount],b10[EmployeeCount],b5[EmployeeCount],c1[EmployeeCount],c50[EmployeeCount],c25[EmployeeCount],c10[EmployeeCount],c5[EmployeeCount],c1[EmployeeCount]);
    printf("\n\nAdd Another Personnel? (y/Y/n/N) ");
    scanf("%s", &AddMorePersonnel);
    if (AddMorePersonnel == 'y' || AddMorePersonnel == 'Y')
    {
        PersonnelInfo();
    }
    else if (AddMorePersonnel == 'n' || AddMorePersonnel == 'N')
    {
        GeneralTable();
    }
}

void GeneralTable()
{
    for (i=0; i<=EmployeeCount; i++)
    {
        TotalGeneral += PostTaxGross[i];
        Total200 += b200[EmployeeCount];
        Total100 += b100[EmployeeCount];
        Total50 += b50[EmployeeCount];
        Total20 += b20[EmployeeCount];
        Total10 += b10[EmployeeCount];
        Total5 += b5[EmployeeCount];
        Total1 += c1[EmployeeCount];
        Totalk50 += c50[EmployeeCount];
        Totalk25 += c25[EmployeeCount];
        Totalk10 += c10[EmployeeCount];
        Totalk5 += c5[EmployeeCount];
        Totalk1 += c1[EmployeeCount];
    }
    for (i=0; i<EmployeeCount; i++)
    {
        TotalTaxDeduction += DailyTotalGrossSalary[EmployeeCount] - MonthlyTotalGrossSalary[EmployeeCount];
        if (PostTaxGross[i] < 2000)
        {
            BelowTwoThousand++;
        }
    }
    for (i=0; i<EmployeeCount; i++)
    {
        InitialMoneyTotal += MonthlyGrossSalary[EmployeeCount];
    }

    if (Tax15==0)
        Tax15Percent=0;
    else
        Tax15Percent=Tax15/(EmployeeCount+1);
    if(Tax20==0)
        Tax20Percent=0;
    else
        Tax20Percent=Tax20/(EmployeeCount+1);
    if(Tax27==0)
        Tax27Percent=0;
    else
        Tax27Percent=Tax27/(EmployeeCount+1);
    if (Tax35==0)
        Tax35Percent=0;
    else
        Tax35Percent=Tax35/(EmployeeCount+1);

    HighestGross = DailyTotalGrossSalary[0];
    for (i=0; i<EmployeeCount+1; i++)
    {
        if (HighestGross < DailyTotalGrossSalary[i])
        {
            HighestGross = DailyTotalGrossSalary[i];
        }
    }
    for (i=0; i<EmployeeCount+1; i++)
    {
        if (DailyTotalGrossSalary[i] == HighestGross)
        {
            k=i;
            break;
        }
    }
    HighestMonthlySalary = PostTaxGross[0];
    for (i=0; i<EmployeeCount+1; i++)
    {
        if (HighestMonthlySalary < PostTaxGross[i])
        {
            HighestMonthlySalary = PostTaxGross[i];
        }
    }
    for (i=0; i<EmployeeCount+1; i++)
    {
        if (PostTaxGross[i] == HighestMonthlySalary)
        {
            j=i;
            break;
        }
    }



    printf("\nTotal Monthly Net Salary Paid to All Personnel: %.2f", TotalGeneral);
    printf("\nTax Amount Transferred to the State: %.2f", TotalTaxDeduction);
    printf("\nAverage of All Employees' Total Monthly Gross Salaries: %.2f", InitialMoneyTotal/(EmployeeCount+1));
    printf("\nAverage of All Employees' Total Monthly Net Salaries: %.2f", TotalGeneral/(EmployeeCount+1));
    printf("\nAmounts of Money Needed in Circulation;");
    printf("\n\n200\t 100\t 50\t 20\t 10\t 5\t 1\t0.5\t0.25\t0.1\t0.05\t0.01");
    printf("\n---\t ---\t ---\t---\t---\t---\t---\t---\t---\t---\t---\t---\t ");
    printf("\n%d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d \t %d ", Total200, Total100, Total50, Total20, Total10, Total5, Total1, Totalk50, Totalk25, Totalk10, Totalk5, Totalk1);
    printf("\nNumber of Employees Earning Below 2000 TL Net Salary Per Month: %d", BelowTwoThousand + 1);
    printf("\nNumber of Persons and Percentage with 15 Tax Rate: %d  %.2f", Tax15, Tax15Percent);
    printf("\nNumber of Persons and Percentage with 20 Tax Rate: %d  %.2f", Tax20, Tax20Percent);
    printf("\nNumber of Persons and Percentage with 27 Tax Rate: %d  %.2f", Tax27, Tax27Percent);
    printf("\nNumber of Persons and Percentage with 35 Tax Rate: %d  %.2f", Tax35, Tax35Percent);
    printf("\n\nHighest Paid Employee;");
    printf("\nID Number: %ld", IDNumber[k]);
    for (i=0; i<50; i++)
    {
        TempFirstName[i]=FirstName[k][i];
        TempLastName[i]=LastName[k][i];
    }
    printf("\nName: %s %s", TempFirstName, TempLastName);

    printf("\nTotal Monthly Gross Salary: %.2f", DailyTotalGrossSalary[k]);
    printf("\nIncome Tax Deduction: %.2f", DailyTotalGrossSalary[k]-MonthlyTotalGrossSalary[k]);
    printf("\nMonthly Net Salary: %.2f", PostTaxGross[k]);


    printf("\n\nEmployee with the Highest Net Monthly Salary;");
    printf("\nID Number: %ld", IDNumber[j]);
        for (i=0; i<50; i++)
    {
        TempFirstName[i]=FirstName[j][i];
        TempLastName[i]=LastName[j][i];
    }
    printf("\nName: %s %s", TempFirstName, TempLastName);
    printf("\nTotal Monthly Gross Salary: %.2f", DailyTotalGrossSalary[j]);
    printf("\nIncome Tax Deduction: %.2f", DailyTotalGrossSalary[j]-MonthlyTotalGrossSalary[j]);
    printf("\nMonthly Net Salary: %.2f", PostTaxGross[j]);
    printf("\nPercentage of Married Employees Among All Employees: %.2f", (float)MarriedCount/(float)(EmployeeCount+1));
    printf("\nPercentage of Single Employees Among All Employees: %.2f", (float)SingleCount/(float)(EmployeeCount+1));
    printf("\nPercentage of Married Employees Whose Spouses are Also Working: %f", (float)WorkingSpouse/(float)MarriedCount);
    printf("\nConsidering Only Those With Dependent Children, the Average Number of Dependent Children Per Employee: %f", (float)TotalChildCount/(float)HasChild);
    printf("\nNumber of Employees with More Than Three Dependents: %d", MoreThanThreeChildren);
    printf("\nNumber of Disabled Employees and Their Percentage Among All Employees: %.2f", (float)DisabledEmployeesCount/(float)(EmployeeCount+1));
}
